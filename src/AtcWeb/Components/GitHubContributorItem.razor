<MudCard Elevation="4" Style="@GetStyle()">
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar Image="@AvatarLink"
                       Size="Size.Large"
                       Class="mud-elevation-4"/>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">@Name</MudText>
            <MudText Typo="Typo.body2">@Title</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub"
                           Link="@GithubLink"
                           Color="Color.Dark"
                           Target="_blank"/>
        </CardHeaderActions>
    </MudCardHeader>
    @if (ChildContent != null)
    {
        <MudCardContent>
            @ChildContent
        </MudCardContent>
    }
</MudCard>

@code {

    [Inject]
    private StateContainer? StateContainer { get; set; }

    [Parameter]
    public string AvatarLink { get; set; } = string.Empty;

    [Parameter]
    public string GithubLink { get; set; } = string.Empty;

    [Parameter]
    public string Name { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = "Contributor";

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        StateContainer!.OnThemeChange += OnThemeChange;
        base.OnInitialized();
    }

    private void OnThemeChange(object sender, EventArgs args)
    {
        StateHasChanged();
    }

    private string GetStyle()
    {
        return StateContainer!.CurrentTheme == MudThemeHelper.DarkTheme
            ? $"background-color: {MudThemeHelper.DarkTheme.Palette.Black};"
            : $"background-color: {MudThemeHelper.LightTheme.Palette.Surface};";
    }
}